import os, random, json
from flask import Flask, request
import requests
from datetime import datetime

app = Flask(__name__)

PAGE_ACCESS_TOKEN = "EAAU0Fisjh0cBPEbpiq9JpPgZCkTmNKykol1j2jYC5AdMoxlPi0RThvTjRUHWc4ZBx3pRbSz5d8wZCtsTd8GyAZADfGfWKUmCZBJnygZAVvjvH7VgqRBURsLTZC45TWGnIaD7cQ8FfPVfjBoBZALpQMOIlc7QJnGBDTswByTba30lxvGenx72PxifPbPBkzk1X5igoWCZBl8nGZBgZDZD"
VERIFY_TOKEN = "botchat123"
RESPONSES_FILE = "responses.json"

sessions = {}
# ======================
# Load / Save h·ªçc th√™m
# ======================
if os.path.exists(RESPONSES_FILE):
    with open(RESPONSES_FILE, "r", encoding="utf-8") as f:
        responses = json.load(f)
else:
    responses = {}

def save_responses():
    with open(RESPONSES_FILE, "w", encoding="utf-8") as f:
        json.dump(responses, f, ensure_ascii=False, indent=2)

# ======================
# Verify webhook
# ======================
@app.route("/webhook", methods=["GET"])
def verify():
    if request.args.get("hub.mode") == "subscribe" and request.args.get("hub.verify_token") == VERIFY_TOKEN:
        return request.args.get("hub.challenge"), 200
    return "Forbidden", 403

# ======================
# Nh·∫≠n message
# ======================
@app.route("/webhook", methods=["POST"])
def webhook():
    data = request.get_json()
    if data.get("object") == "page":
        for entry in data.get("entry", []):
            for event in entry.get("messaging", []):
                sender = event.get("sender", {}).get("id")
                if not sender:
                    continue

                if "message" in event:
                    text = event["message"].get("text", "")
                    text_lower = text.lower()

                    greetings = ["hi", "hello", "xin ch√†o", "ch√†o"]
                    ask_time = ["m·∫•y gi·ªù", "time", "gi·ªù", "th·ªùi gian"]
                    dice_keywords = ["x√∫c x·∫Øc", "dice", "l·∫Øc"]
                    game_keywords = ["n·ªëi t·ª´", "ch∆°i n·ªëi t·ª´ kh√¥ng", "ch∆°i n·ªëi t·ª´ ko"]


                    # --- h·ªçc th√™m ---
                    if text_lower.startswith("h·ªçc:"):
                        try:
                            parts = text.replace("h·ªçc:", "", 1).split("=")
                            keyword, answer = parts[0].strip(), parts[1].strip()
                            responses[keyword.lower()] = answer
                            save_responses()
                            reply = f"üëå ƒê√£ h·ªçc th√™m t·ª´ m·ªõi: '{keyword}'"
                        except:
                            reply = "‚ö†Ô∏è Sai c√∫ ph√°p, h√£y nh·∫Øn: h·ªçc: t·ª´ kh√≥a = c√¢u tr·∫£ l·ªùi"

                    # --- x·ª≠ l√Ω tin nh·∫Øn ---
                    elif any(word in text_lower for word in greetings):
                        reply = "Xin ch√†o b·∫°n üëã"

                    elif any(word in text_lower for word in ask_time):
                        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                        reply = f"‚è∞ B√¢y gi·ªù l√† {now}."
                    # --- n·ªëi t·ª´ ---
                    elif any(word in text_lower for word in game_keywords):
                        essions[sender] = {"noi_tu": {"last_phrase": "b·∫°n th√¢n"}}
                        reply = "üéÆ B·∫Øt ƒë·∫ßu game n·ªëi t·ª´ 2 t·ª´! M√¨nh m·ªü ƒë·∫ßu: 'b·∫°n th√¢n'. Gi·ªù t·ªõi l∆∞·ª£t b·∫°n!"
                    elif sender in sessions and sessions[sender]["mode"] == "noi_tu":
                        if text_lower == "tho√°t":
                            del sessions[sender]
                            reply = "‚úÖ B·∫°n ƒë√£ tho√°t game. Gi·ªù m√¨nh quay l·∫°i chat b√¨nh th∆∞·ªùng nh√©!"
                        else:
                            last_phrase = sessions[sender]["last_phrase"]
                            new_phrase = text.strip().lower().split()
                    
                            if len(new_phrase) < 2:
                                reply = "‚ö†Ô∏è B·∫°n ph·∫£i nh·∫≠p √≠t nh·∫•t 2 t·ª´ (v√≠ d·ª•: 'b·∫°n th√¢n')."
                            else:
                                last_word = last_phrase.split()[-1]   # t·ª´ cu·ªëi c·ª•m c≈©
                                first_word = new_phrase[0]            # t·ª´ ƒë·∫ßu c·ª•m m·ªõi
                    
                                if first_word == last_word:
                                    sessions[sender]["last_phrase"] = " ".join(new_phrase)
                                    reply = f"‚úÖ Chu·∫©n! Gi·ªù m√¨nh n·ªëi ti·∫øp t·ª´ '{new_phrase[-1]}...'"
                                else:
                                    reply = f"‚ùå Sai r·ªìi! C·ª•m t·ª´ b·∫°n nh·∫≠p kh√¥ng b·∫Øt ƒë·∫ßu b·∫±ng '{last_word}'. Game k·∫øt th√∫c."
                                    del sessions[sender]
                                
                    elif any(word in text_lower for word in dice_keywords):
                        if "ch∆°i" in text_lower or "2" in text_lower:
                            user_dice = random.randint(1, 6)
                            bot_dice = random.randint(1, 6)
                            if user_dice > bot_dice:
                                result = "üéâ B·∫°n th·∫Øng!"
                            elif user_dice < bot_dice:
                                result = "ü§ñ Bot th·∫Øng!"
                            else:
                                result = "üòÖ H√≤a r·ªìi!"
                            reply = f"üé≤ B·∫°n tung ƒë∆∞·ª£c {user_dice}\nü§ñ Bot tung ƒë∆∞·ª£c {bot_dice}\nüëâ {result}"
                        else:
                            dice = random.randint(1, 6)
                            reply = f"üé≤ B·∫°n tung ƒë∆∞·ª£c s·ªë {dice}"

                    else:
                        found = False
                        for key, value in responses.items():
                            if key in text_lower:   # so kh·ªõp ch·ªØ th∆∞·ªùng
                                reply = value       # tr·∫£ l·ªùi ƒë√∫ng value g·ªëc (gi·ªØ vi·∫øt hoa)
                                found = True
                                break
                        if not found:
                           reply = f"ü§î Xin l·ªói, m√¨nh ch∆∞a hi·ªÉu: {text}\nüëâ B·∫°n c√≥ th·ªÉ d·∫°y m√¨nh b·∫±ng c√∫ ph√°p: h·ªçc: t·ª´ kh√≥a = c√¢u tr·∫£ l·ªùi"


                    send_message(sender, reply)

                elif "postback" in event:
                    payload = event["postback"].get("payload")
                    if payload == "GET_STARTED":
                        send_message(sender, "Xin ch√†o! G√µ 'menu' ƒë·ªÉ b·∫Øt ƒë·∫ßu.")
        return "OK", 200
    return "Not Found", 404

# ======================
# G·ª≠i message ra Messenger
# ======================
def send_message(psid, text):
    url = "https://graph.facebook.com/v19.0/me/messages"
    params = {"access_token": PAGE_ACCESS_TOKEN}
    body = {"recipient": {"id": psid}, "message": {"text": text}}
    r = requests.post(url, params=params, json=body)
    if r.status_code != 200:
        print("Error:", r.text)

if __name__ == "__main__":
    port = int(os.getenv("PORT", 3000))
    app.run(host="0.0.0.0", port=port)
